Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['company_size_unknown', 'last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.665 and training_hours <= 323.0

Specificity: 0.876 Precision: 0.472 Recall: 0.384
CPU time used extracting features: 1.212251294999998 seconds
CPU time used overall without disjunctions: 1.2448908229999986 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.665 and training_hours <= 323.0 or
company_size_unknown > 0.5 and last_new_job > 0.5 or
company_size_unknown > 0.5 and city_development_index <= 0.7665 or
company_size_unknown > 0.5 and training_hours <= 82.5 or
city_development_index <= 0.7915 and experience <= 4.5 or
experience <= 19.5 and last_new_job > 2.5

Specificity: 0.518 Precision: 0.335 Recall: 0.837
CPU time used extracting features: 1.212251294999998 seconds
CPU time used overall with disjunctions: 1.3235333089999983 seconds
