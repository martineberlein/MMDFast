Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['company_size_unknown', 'last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.6245 and city_development_index > 0.49

Specificity: 0.885 Precision: 0.493 Recall: 0.378
CPU time used extracting features: 1.4017664399999994 seconds
CPU time used overall without disjunctions: 1.4512832150000001 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.6245 and city_development_index > 0.49 or
company_size_unknown > 0.5 and last_new_job > 0.5

Specificity: 0.745 Precision: 0.441 Recall: 0.677
CPU time used extracting features: 1.4017664399999994 seconds
CPU time used overall with disjunctions: 1.4616248449999993 seconds
