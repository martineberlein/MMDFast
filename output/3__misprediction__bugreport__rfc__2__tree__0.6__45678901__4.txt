Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['projectCoverage', 'activitysequence']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

activitysequence > 0.205812 and activitysequence <= 0.6700955

Specificity: 0.733 Precision: 0.278 Recall: 0.65
CPU time used extracting features: 0.934746870999998 seconds
CPU time used overall without disjunctions: 0.9602141089999989 seconds

Best ruleset with most influential features and decision trees with disjunctions:

activitysequence > 0.205812 and activitysequence <= 0.6700955

Specificity: 0.733 Precision: 0.278 Recall: 0.65
CPU time used extracting features: 0.934746870999998 seconds
CPU time used overall with disjunctions: 0.960237492000001 seconds
