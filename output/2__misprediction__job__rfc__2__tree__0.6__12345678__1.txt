Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.6245 and city_development_index > 0.49

Specificity: 0.885 Precision: 0.493 Recall: 0.378
CPU time used extracting features: 1.4229422870000015 seconds
CPU time used overall without disjunctions: 1.4707523620000025 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.6245 and city_development_index > 0.49 or
city_development_index <= 0.7915 and training_hours > 6.5 or
city_development_index <= 0.9235 and city_development_index > 0.914

Specificity: 0.476 Precision: 0.302 Recall: 0.764
CPU time used extracting features: 1.4229422870000015 seconds
CPU time used overall with disjunctions: 1.4949194560000016 seconds
