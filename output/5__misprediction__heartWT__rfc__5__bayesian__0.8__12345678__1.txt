Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['serum_sodium', 'creatinine_phosphokinase', 'platelets', 'serum_creatinine', 'age']
Build new input dataframe with relevant features...
Create misprediction explanation utilizing bayesian optimization...
Best ruleset with most influential features and bayesian optimization without disjunctions:

age > 47.84 and serum_creatinine > 0.81

Specificity: 0.35 Precision: 0.409 Recall: 0.9
CPU time used extracting features: 0.2038353430000015 seconds
CPU time used overall without disjunctions: 255.79173175100001 seconds

Best ruleset with most influential features and bayesian optimization with disjunctions:

age > 47.84 and serum_creatinine > 0.81

Specificity: 0.35 Precision: 0.409 Recall: 0.9
CPU time used extracting features: 0.2038353430000015 seconds
CPU time used overall with disjunctions: 255.79174819200003 seconds
