Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.6325 and training_hours <= 267.0

Specificity: 0.879 Precision: 0.473 Recall: 0.379
CPU time used extracting features: 1.3911019339999982 seconds
CPU time used overall without disjunctions: 1.4405344089999979 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.6325 and training_hours <= 267.0 or
city_development_index > 0.632 and city_development_index <= 0.768 or
city_development_index > 0.6965 and city_development_index <= 0.9235

Specificity: 0.148 Precision: 0.237 Recall: 0.922
CPU time used extracting features: 1.3911019339999982 seconds
CPU time used overall with disjunctions: 1.4642319029999982 seconds
