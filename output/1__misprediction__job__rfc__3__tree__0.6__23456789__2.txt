Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.665 and training_hours <= 323.0

Specificity: 0.876 Precision: 0.472 Recall: 0.384
CPU time used extracting features: 1.297935453000001 seconds
CPU time used overall without disjunctions: 1.3519726339999991 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.665 and training_hours <= 323.0 or
city_development_index <= 0.744 and experience <= 15.5 or
experience <= 7.5 and city_development_index <= 0.9245

Specificity: 0.569 Precision: 0.315 Recall: 0.687
CPU time used extracting features: 1.297935453000001 seconds
CPU time used overall with disjunctions: 1.3708894619999974 seconds
