Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation utilizing bayesian optimization...
Best ruleset with most influential features and bayesian optimization without disjunctions:

city_development_index <= 0.69 and city_development_index > 0.48

Specificity: 0.863 Precision: 0.463 Recall: 0.398
CPU time used extracting features: 0.984578213999999 seconds
CPU time used overall without disjunctions: 283.557618434 seconds

Best ruleset with most influential features and bayesian optimization with disjunctions:

city_development_index <= 0.69 and city_development_index > 0.48 or
experience <= 17.82 and city_development_index <= 0.80 or
last_new_job <= 4.70 and experience <= 5.38

Specificity: 0.583 Precision: 0.326 Recall: 0.68
CPU time used extracting features: 0.984578213999999 seconds
CPU time used overall with disjunctions: 795.261499128 seconds
