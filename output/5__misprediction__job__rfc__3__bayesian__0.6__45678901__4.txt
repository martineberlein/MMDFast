Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation utilizing bayesian optimization...
Best ruleset with most influential features and bayesian optimization without disjunctions:

city_development_index <= 0.63

Specificity: 0.878 Precision: 0.479 Recall: 0.392
CPU time used extracting features: 0.9761746440000003 seconds
CPU time used overall without disjunctions: 203.08457935599998 seconds

Best ruleset with most influential features and bayesian optimization with disjunctions:

city_development_index <= 0.63 or
experience <= 17.52 and city_development_index <= 0.81 or
experience <= 3.68 and city_development_index > 0.85

Specificity: 0.658 Precision: 0.343 Recall: 0.624
CPU time used extracting features: 0.9761746440000003 seconds
CPU time used overall with disjunctions: 585.577514453 seconds
