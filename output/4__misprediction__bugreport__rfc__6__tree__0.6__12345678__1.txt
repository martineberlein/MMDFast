Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['recentActivityCount', 'InitialActivityCount', 'meanCommentSize', 'projectCoverage', 'ticketCleanedBodyLen', 'activitysequence']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

activitysequence > 0.2053445 and activitysequence <= 0.772993

Specificity: 0.667 Precision: 0.275 Recall: 0.8
CPU time used extracting features: 0.916922005 seconds
CPU time used overall without disjunctions: 0.9705550669999994 seconds

Best ruleset with most influential features and decision trees with disjunctions:

activitysequence > 0.2053445 and activitysequence <= 0.772993

Specificity: 0.667 Precision: 0.275 Recall: 0.8
CPU time used extracting features: 0.916922005 seconds
CPU time used overall with disjunctions: 0.9705831799999984 seconds
