Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['company_size_unknown', 'last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.665 and training_hours <= 323.0

Specificity: 0.876 Precision: 0.472 Recall: 0.384
CPU time used extracting features: 1.4054639590000022 seconds
CPU time used overall without disjunctions: 1.4563514059999996 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.665 and training_hours <= 323.0 or
company_size_unknown > 0.5 and last_new_job > 0.5

Specificity: 0.729 Precision: 0.423 Recall: 0.687
CPU time used extracting features: 1.4054639590000022 seconds
CPU time used overall with disjunctions: 1.4665846520000017 seconds
