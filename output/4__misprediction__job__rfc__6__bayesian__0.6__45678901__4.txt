Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['relevent_experience', 'company_size_unknown', 'last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation utilizing bayesian optimization...
Best ruleset with most influential features and bayesian optimization without disjunctions:

city_development_index <= 0.72

Specificity: 0.82 Precision: 0.416 Recall: 0.449
CPU time used extracting features: 0.9770698870000007 seconds
CPU time used overall without disjunctions: 215.445763312 seconds

Best ruleset with most influential features and bayesian optimization with disjunctions:

city_development_index <= 0.72 or
city_development_index <= 0.93 and company_size_unknown > 0.13

Specificity: 0.63 Precision: 0.369 Recall: 0.754
CPU time used extracting features: 0.9770698870000007 seconds
CPU time used overall with disjunctions: 453.550607754 seconds
