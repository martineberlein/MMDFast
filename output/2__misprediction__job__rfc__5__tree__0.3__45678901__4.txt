Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['company_size_unknown', 'last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.6325 and training_hours <= 267.0

Specificity: 0.879 Precision: 0.473 Recall: 0.379
CPU time used extracting features: 1.423958320999997 seconds
CPU time used overall without disjunctions: 1.4711347859999968 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.6325 and training_hours <= 267.0

Specificity: 0.879 Precision: 0.473 Recall: 0.379
CPU time used extracting features: 1.423958320999997 seconds
CPU time used overall with disjunctions: 1.471163819999994 seconds
