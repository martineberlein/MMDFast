Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.6245 and city_development_index > 0.49

Specificity: 0.885 Precision: 0.493 Recall: 0.378
CPU time used extracting features: 1.1189714739999985 seconds
CPU time used overall without disjunctions: 1.1499150629999981 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.6245 and city_development_index > 0.49 or
city_development_index <= 0.7915 and experience <= 17.5 or
experience <= 7.5 and city_development_index <= 0.9235

Specificity: 0.554 Precision: 0.322 Recall: 0.713
CPU time used extracting features: 1.1189714739999985 seconds
CPU time used overall with disjunctions: 1.1714579739999955 seconds
