Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['company_size_unknown', 'last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.6325 and training_hours <= 267.0

Specificity: 0.879 Precision: 0.473 Recall: 0.379
CPU time used extracting features: 1.3841534379999985 seconds
CPU time used overall without disjunctions: 1.4331350699999987 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.6325 and training_hours <= 267.0 or
company_size_unknown > 0.5 and last_new_job > 0.5

Specificity: 0.739 Precision: 0.423 Recall: 0.667
CPU time used extracting features: 1.3841534379999985 seconds
CPU time used overall with disjunctions: 1.44105652 seconds
