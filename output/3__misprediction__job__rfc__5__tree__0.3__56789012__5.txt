Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['company_size_unknown', 'last_new_job', 'experience', 'city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.632 and training_hours <= 99.5

Specificity: 0.908 Precision: 0.492 Recall: 0.32
CPU time used extracting features: 1.1062363590000004 seconds
CPU time used overall without disjunctions: 1.1372581239999988 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.632 and training_hours <= 99.5

Specificity: 0.908 Precision: 0.492 Recall: 0.32
CPU time used extracting features: 1.1062363590000004 seconds
CPU time used overall with disjunctions: 1.137294581999999 seconds
