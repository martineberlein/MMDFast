Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['creatinine_phosphokinase', 'platelets', 'serum_sodium', 'serum_creatinine', 'age']
Build new input dataframe with relevant features...
Preprocess data for islearn...
Construct string inputs...
['creatinine_phosphokinase' 'platelets' 'serum_sodium' 'serum_creatinine'
 'age' 'DEATH_EVENT' 'misprediction']
['creatinine_phosphokinase', 'platelets', 'serum_sodium', 'serum_creatinine', 'age']
New grammar...
{'<start>': ['<creatinine_phosphokinase> <platelets> <serum_sodium> <serum_creatinine> <age>'], '<age>': ['0', '<onenine><maybe_digits>'], '<creatinine_phosphokinase>': ['0', '<onenine><maybe_digits>'], '<platelets>': ['0', '<onenine><maybe_digits>'], '<serum_creatinine>': ['0', '<onenine><maybe_digits>'], '<serum_sodium>': ['0', '<onenine><maybe_digits>'], '<onenine>': ['1', '2', '3', '4', '5', '6', '7', '8', '9'], '<maybe_digits>': ['', '<digits>'], '<digits>': ['<digit>', '<digit><digits>'], '<digit>': ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']}
Unrelevant nonterminals in grammar...
{'<onenine>', '<maybe_digits>', '<digits>', '<digit>'}
Run IsLearn to create misprediction explanation without disjunctions...
Best ruleset with most influential features and Islearn without disjunctions:

platelets <= 274000.0 and age > 70.0

Specificity: 0.91 Precision: 0.538 Recall: 0.304
CPU time used extracting features: 0.2106815260000019 seconds
CPU time used overall without disjunctions: 13.109025896000002 seconds
