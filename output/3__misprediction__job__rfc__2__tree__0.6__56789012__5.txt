Loading model from .joblib...
Check which test inputs are mispredicted by the model...
Learn most influential input features...
Train random forest classifier on misprediction data...
Use feature importance to explain model...
Most influential features:
['city_development_index', 'training_hours']
Build new input dataframe with relevant features...
Create misprediction explanation by learning decision trees...
Best ruleset with most influential features and decision trees without disjunctions:

city_development_index <= 0.632 and training_hours <= 99.5

Specificity: 0.908 Precision: 0.492 Recall: 0.32
CPU time used extracting features: 1.0631998449999998 seconds
CPU time used overall without disjunctions: 1.094478672000001 seconds

Best ruleset with most influential features and decision trees with disjunctions:

city_development_index <= 0.632 and training_hours <= 99.5 or
city_development_index <= 0.7915 and city_development_index <= 0.632 or
city_development_index <= 0.7915 and city_development_index > 0.69 or
city_development_index > 0.9175 and city_development_index <= 0.9205

Specificity: 0.505 Precision: 0.297 Recall: 0.748
CPU time used extracting features: 1.0631998449999998 seconds
CPU time used overall with disjunctions: 1.135224491999999 seconds
